// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/KumKeeHyun/gin-realworld/internal/core/service"
	"github.com/KumKeeHyun/gin-realworld/internal/repository/postgres"
	"github.com/KumKeeHyun/gin-realworld/internal/repository/sqlite"
	"github.com/KumKeeHyun/gin-realworld/internal/rest"
	"github.com/KumKeeHyun/gin-realworld/internal/rest/controller"
	"github.com/KumKeeHyun/gin-realworld/internal/rest/middleware"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitRouterUsingSqlite(cfg *config, logger *zap.Logger) (*gin.Engine, error) {
	jwtUtil := InitJwtUtil(cfg)
	checkJwtMiddleware := middleware.NewCheckJwtMiddleware(jwtUtil, logger)
	ensureAuthMiddleware := middleware.NewEnsureAuthMiddleware(logger)
	ensureNotAuthMiddleware := middleware.NewEnsureNotAuthMiddleware(logger)
	db, err := InitDatasource(cfg, logger)
	if err != nil {
		return nil, err
	}
	transactionMiddleware := middleware.NewTransactionMiddleware(db, logger)
	errorsMiddleware := middleware.NewErrorsMiddleware(logger)
	userRepository := sqlite.NewUserRepository(db)
	articleRepository := sqlite.NewArticleRepository(db)
	authService := service.NewAuthService(userRepository, articleRepository, jwtUtil, logger)
	authController := controller.NewAuthController(authService)
	profileService := service.NewProfileService(userRepository, logger)
	profileController := controller.NewProfileController(profileService)
	articleService := service.NewArticleService(articleRepository, userRepository, logger)
	articleController := controller.NewArticleController(articleService)
	commentRepository := sqlite.NewCommentRepository(db)
	commentService := service.NewCommentService(commentRepository, articleRepository, userRepository, logger)
	commentController := controller.NewCommentController(commentService)
	engine := rest.NewRouter(logger, checkJwtMiddleware, ensureAuthMiddleware, ensureNotAuthMiddleware, transactionMiddleware, errorsMiddleware, authController, profileController, articleController, commentController)
	return engine, nil
}

func InitRouterUsingPostgres(cfg *config, logger *zap.Logger) (*gin.Engine, error) {
	jwtUtil := InitJwtUtil(cfg)
	checkJwtMiddleware := middleware.NewCheckJwtMiddleware(jwtUtil, logger)
	ensureAuthMiddleware := middleware.NewEnsureAuthMiddleware(logger)
	ensureNotAuthMiddleware := middleware.NewEnsureNotAuthMiddleware(logger)
	db, err := InitDatasource(cfg, logger)
	if err != nil {
		return nil, err
	}
	transactionMiddleware := middleware.NewTransactionMiddleware(db, logger)
	errorsMiddleware := middleware.NewErrorsMiddleware(logger)
	userRepository := postgres.NewUserRepository(db)
	articleRepository := postgres.NewArticleRepository(db)
	authService := service.NewAuthService(userRepository, articleRepository, jwtUtil, logger)
	authController := controller.NewAuthController(authService)
	profileService := service.NewProfileService(userRepository, logger)
	profileController := controller.NewProfileController(profileService)
	articleService := service.NewArticleService(articleRepository, userRepository, logger)
	articleController := controller.NewArticleController(articleService)
	commentRepository := postgres.NewCommentRepository(db)
	commentService := service.NewCommentService(commentRepository, articleRepository, userRepository, logger)
	commentController := controller.NewCommentController(commentService)
	engine := rest.NewRouter(logger, checkJwtMiddleware, ensureAuthMiddleware, ensureNotAuthMiddleware, transactionMiddleware, errorsMiddleware, authController, profileController, articleController, commentController)
	return engine, nil
}

// wire.go:

var SqliteRepositorySet = wire.NewSet(sqlite.NewUserRepository, sqlite.NewArticleRepository, sqlite.NewCommentRepository)

var PostgresRepositorySet = wire.NewSet(postgres.NewUserRepository, postgres.NewArticleRepository, postgres.NewCommentRepository)

var ServiceSet = wire.NewSet(service.NewAuthService, service.NewProfileService, service.NewArticleService, service.NewCommentService)

var ControllerSet = wire.NewSet(controller.NewAuthController, controller.NewProfileController, controller.NewArticleController, controller.NewCommentController)

var MiddlewareSet = wire.NewSet(middleware.NewCheckJwtMiddleware, middleware.NewEnsureAuthMiddleware, middleware.NewEnsureNotAuthMiddleware, middleware.NewTransactionMiddleware, middleware.NewErrorsMiddleware)
