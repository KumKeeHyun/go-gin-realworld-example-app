// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KumKeeHyun/gin-realworld/internal/core/ports (interfaces: UserRepository,ArticleRepository,CommentRepository)

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/KumKeeHyun/gin-realworld/internal/core/domain"
	ports "github.com/KumKeeHyun/gin-realworld/internal/core/ports"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateFollow mocks base method.
func (m *MockUserRepository) CreateFollow(arg0, arg1 uint) (domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollow", arg0, arg1)
	ret0, _ := ret[0].(domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollow indicates an expected call of CreateFollow.
func (mr *MockUserRepositoryMockRecorder) CreateFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollow", reflect.TypeOf((*MockUserRepository)(nil).CreateFollow), arg0, arg1)
}

// DeleteFollow mocks base method.
func (m *MockUserRepository) DeleteFollow(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFollow indicates an expected call of DeleteFollow.
func (mr *MockUserRepositoryMockRecorder) DeleteFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollow", reflect.TypeOf((*MockUserRepository)(nil).DeleteFollow), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), arg0)
}

// FindByEmailOrUsername mocks base method.
func (m *MockUserRepository) FindByEmailOrUsername(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailOrUsername", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailOrUsername indicates an expected call of FindByEmailOrUsername.
func (mr *MockUserRepositoryMockRecorder) FindByEmailOrUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailOrUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByEmailOrUsername), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockUserRepository) FindByID(arg0 uint) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), arg0)
}

// FindByUsername mocks base method.
func (m *MockUserRepository) FindByUsername(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserRepositoryMockRecorder) FindByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByUsername), arg0)
}

// FindFollow mocks base method.
func (m *MockUserRepository) FindFollow(arg0, arg1 uint) (domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollow", arg0, arg1)
	ret0, _ := ret[0].(domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollow indicates an expected call of FindFollow.
func (mr *MockUserRepositoryMockRecorder) FindFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollow", reflect.TypeOf((*MockUserRepository)(nil).FindFollow), arg0, arg1)
}

// FindFollows mocks base method.
func (m *MockUserRepository) FindFollows(arg0 uint, arg1 []uint) ([]domain.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollows", arg0, arg1)
	ret0, _ := ret[0].([]domain.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFollows indicates an expected call of FindFollows.
func (mr *MockUserRepositoryMockRecorder) FindFollows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollows", reflect.TypeOf((*MockUserRepository)(nil).FindFollows), arg0, arg1)
}

// FindProfile mocks base method.
func (m *MockUserRepository) FindProfile(arg0, arg1 uint) (domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProfile", arg0, arg1)
	ret0, _ := ret[0].(domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProfile indicates an expected call of FindProfile.
func (mr *MockUserRepositoryMockRecorder) FindProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProfile", reflect.TypeOf((*MockUserRepository)(nil).FindProfile), arg0, arg1)
}

// Save mocks base method.
func (m *MockUserRepository) Save(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0)
}

// WithTx mocks base method.
func (m *MockUserRepository) WithTx(arg0 *gorm.DB) ports.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.UserRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserRepositoryMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserRepository)(nil).WithTx), arg0)
}

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// CreateFavorite mocks base method.
func (m *MockArticleRepository) CreateFavorite(arg0, arg1 uint) (domain.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", arg0, arg1)
	ret0, _ := ret[0].(domain.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockArticleRepositoryMockRecorder) CreateFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockArticleRepository)(nil).CreateFavorite), arg0, arg1)
}

// DeleteBySlug mocks base method.
func (m *MockArticleRepository) DeleteBySlug(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySlug", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySlug indicates an expected call of DeleteBySlug.
func (mr *MockArticleRepositoryMockRecorder) DeleteBySlug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySlug", reflect.TypeOf((*MockArticleRepository)(nil).DeleteBySlug), arg0)
}

// DeleteFavorite mocks base method.
func (m *MockArticleRepository) DeleteFavorite(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockArticleRepositoryMockRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockArticleRepository)(nil).DeleteFavorite), arg0, arg1)
}

// FindBySearchConditions mocks base method.
func (m *MockArticleRepository) FindBySearchConditions(arg0 ports.ArticleSearchConditions) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySearchConditions", arg0)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySearchConditions indicates an expected call of FindBySearchConditions.
func (mr *MockArticleRepositoryMockRecorder) FindBySearchConditions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySearchConditions", reflect.TypeOf((*MockArticleRepository)(nil).FindBySearchConditions), arg0)
}

// FindBySlug mocks base method.
func (m *MockArticleRepository) FindBySlug(arg0 string) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlug", arg0)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlug indicates an expected call of FindBySlug.
func (mr *MockArticleRepositoryMockRecorder) FindBySlug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlug", reflect.TypeOf((*MockArticleRepository)(nil).FindBySlug), arg0)
}

// FindFavorite mocks base method.
func (m *MockArticleRepository) FindFavorite(arg0, arg1 uint) (domain.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavorite", arg0, arg1)
	ret0, _ := ret[0].(domain.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavorite indicates an expected call of FindFavorite.
func (mr *MockArticleRepositoryMockRecorder) FindFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavorite", reflect.TypeOf((*MockArticleRepository)(nil).FindFavorite), arg0, arg1)
}

// FindFavorites mocks base method.
func (m *MockArticleRepository) FindFavorites(arg0 uint, arg1 []uint) ([]domain.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavorites", arg0, arg1)
	ret0, _ := ret[0].([]domain.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavorites indicates an expected call of FindFavorites.
func (mr *MockArticleRepositoryMockRecorder) FindFavorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavorites", reflect.TypeOf((*MockArticleRepository)(nil).FindFavorites), arg0, arg1)
}

// FindFeed mocks base method.
func (m *MockArticleRepository) FindFeed(arg0 uint, arg1 ports.Pageable) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFeed", arg0, arg1)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFeed indicates an expected call of FindFeed.
func (mr *MockArticleRepositoryMockRecorder) FindFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFeed", reflect.TypeOf((*MockArticleRepository)(nil).FindFeed), arg0, arg1)
}

// FindTags mocks base method.
func (m *MockArticleRepository) FindTags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTags indicates an expected call of FindTags.
func (mr *MockArticleRepositoryMockRecorder) FindTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTags", reflect.TypeOf((*MockArticleRepository)(nil).FindTags))
}

// Save mocks base method.
func (m *MockArticleRepository) Save(arg0 domain.Article) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockArticleRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockArticleRepository)(nil).Save), arg0)
}

// UpdateAuthorInfo mocks base method.
func (m *MockArticleRepository) UpdateAuthorInfo(arg0 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthorInfo indicates an expected call of UpdateAuthorInfo.
func (mr *MockArticleRepositoryMockRecorder) UpdateAuthorInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorInfo", reflect.TypeOf((*MockArticleRepository)(nil).UpdateAuthorInfo), arg0)
}

// WithTx mocks base method.
func (m *MockArticleRepository) WithTx(arg0 *gorm.DB) ports.ArticleRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.ArticleRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockArticleRepositoryMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockArticleRepository)(nil).WithTx), arg0)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCommentRepository) Delete(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepository)(nil).Delete), arg0, arg1)
}

// FindFromArticle mocks base method.
func (m *MockCommentRepository) FindFromArticle(arg0 string) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFromArticle", arg0)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFromArticle indicates an expected call of FindFromArticle.
func (mr *MockCommentRepositoryMockRecorder) FindFromArticle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFromArticle", reflect.TypeOf((*MockCommentRepository)(nil).FindFromArticle), arg0)
}

// Save mocks base method.
func (m *MockCommentRepository) Save(arg0 domain.Comment) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCommentRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCommentRepository)(nil).Save), arg0)
}

// WithTx mocks base method.
func (m *MockCommentRepository) WithTx(arg0 *gorm.DB) ports.CommentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.CommentRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCommentRepositoryMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCommentRepository)(nil).WithTx), arg0)
}
