// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KumKeeHyun/gin-realworld/internal/core/ports (interfaces: AuthService,ProfileService,ArticleService,CommentService)

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/KumKeeHyun/gin-realworld/internal/core/domain"
	ports "github.com/KumKeeHyun/gin-realworld/internal/core/ports"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthService) Register(arg0, arg1, arg2 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockAuthService) Update(arg0 uint, arg1 ports.UserUpdateFields) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthService)(nil).Update), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockAuthService) WithTx(arg0 *gorm.DB) ports.AuthService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.AuthService)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAuthServiceMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAuthService)(nil).WithTx), arg0)
}

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockProfileService) Find(arg0 uint, arg1 string) (domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockProfileServiceMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProfileService)(nil).Find), arg0, arg1)
}

// Follow mocks base method.
func (m *MockProfileService) Follow(arg0 uint, arg1 string) (domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", arg0, arg1)
	ret0, _ := ret[0].(domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockProfileServiceMockRecorder) Follow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockProfileService)(nil).Follow), arg0, arg1)
}

// Unfollow mocks base method.
func (m *MockProfileService) Unfollow(arg0 uint, arg1 string) (domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", arg0, arg1)
	ret0, _ := ret[0].(domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockProfileServiceMockRecorder) Unfollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockProfileService)(nil).Unfollow), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockProfileService) WithTx(arg0 *gorm.DB) ports.ProfileService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.ProfileService)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockProfileServiceMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockProfileService)(nil).WithTx), arg0)
}

// MockArticleService is a mock of ArticleService interface.
type MockArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceMockRecorder
}

// MockArticleServiceMockRecorder is the mock recorder for MockArticleService.
type MockArticleServiceMockRecorder struct {
	mock *MockArticleService
}

// NewMockArticleService creates a new mock instance.
func NewMockArticleService(ctrl *gomock.Controller) *MockArticleService {
	mock := &MockArticleService{ctrl: ctrl}
	mock.recorder = &MockArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleService) EXPECT() *MockArticleServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleService) Create(arg0 uint, arg1, arg2, arg3 string, arg4 []string) (domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleService)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *MockArticleService) Delete(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleService)(nil).Delete), arg0, arg1)
}

// Favorite mocks base method.
func (m *MockArticleService) Favorite(arg0 uint, arg1 string) (domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Favorite", arg0, arg1)
	ret0, _ := ret[0].(domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Favorite indicates an expected call of Favorite.
func (mr *MockArticleServiceMockRecorder) Favorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Favorite", reflect.TypeOf((*MockArticleService)(nil).Favorite), arg0, arg1)
}

// Find mocks base method.
func (m *MockArticleService) Find(arg0 uint, arg1 string) (domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockArticleServiceMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockArticleService)(nil).Find), arg0, arg1)
}

// ListByConditions mocks base method.
func (m *MockArticleService) ListByConditions(arg0 uint, arg1 ports.ArticleSearchConditions) ([]domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByConditions", arg0, arg1)
	ret0, _ := ret[0].([]domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByConditions indicates an expected call of ListByConditions.
func (mr *MockArticleServiceMockRecorder) ListByConditions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByConditions", reflect.TypeOf((*MockArticleService)(nil).ListByConditions), arg0, arg1)
}

// ListFeed mocks base method.
func (m *MockArticleService) ListFeed(arg0 uint, arg1 ports.Pageable) ([]domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeed", arg0, arg1)
	ret0, _ := ret[0].([]domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeed indicates an expected call of ListFeed.
func (mr *MockArticleServiceMockRecorder) ListFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeed", reflect.TypeOf((*MockArticleService)(nil).ListFeed), arg0, arg1)
}

// ListTags mocks base method.
func (m *MockArticleService) ListTags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockArticleServiceMockRecorder) ListTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockArticleService)(nil).ListTags))
}

// Unfavorite mocks base method.
func (m *MockArticleService) Unfavorite(arg0 uint, arg1 string) (domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfavorite", arg0, arg1)
	ret0, _ := ret[0].(domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfavorite indicates an expected call of Unfavorite.
func (mr *MockArticleServiceMockRecorder) Unfavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfavorite", reflect.TypeOf((*MockArticleService)(nil).Unfavorite), arg0, arg1)
}

// Update mocks base method.
func (m *MockArticleService) Update(arg0 uint, arg1 string, arg2 ports.ArticleUpdateFields) (domain.ArticleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.ArticleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockArticleServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleService)(nil).Update), arg0, arg1, arg2)
}

// WithTx mocks base method.
func (m *MockArticleService) WithTx(arg0 *gorm.DB) ports.ArticleService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.ArticleService)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockArticleServiceMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockArticleService)(nil).WithTx), arg0)
}

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentService) Create(arg0 uint, arg1, arg2 string) (domain.CommentView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.CommentView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentService)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockCommentService) Delete(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentService)(nil).Delete), arg0, arg1)
}

// GetFromArticle mocks base method.
func (m *MockCommentService) GetFromArticle(arg0 uint, arg1 string) ([]domain.CommentView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromArticle", arg0, arg1)
	ret0, _ := ret[0].([]domain.CommentView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromArticle indicates an expected call of GetFromArticle.
func (mr *MockCommentServiceMockRecorder) GetFromArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromArticle", reflect.TypeOf((*MockCommentService)(nil).GetFromArticle), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockCommentService) WithTx(arg0 *gorm.DB) ports.CommentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(ports.CommentService)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCommentServiceMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCommentService)(nil).WithTx), arg0)
}
